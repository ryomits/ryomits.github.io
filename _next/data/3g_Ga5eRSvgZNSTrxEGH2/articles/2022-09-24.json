{"pageProps":{"compiledArticle":{"name":"2022-09-24","date":"2022年09月24日","title":"日記","description":"日記","content":"\nGo の定数定義は値を指定しないと前の値が使われるらしい。\n```go\npackage main\n\nimport \"fmt\"\n\nconst (\n  a int32 = 1\n  b\n  c\n)\n\nfunc main() {\n  fmt.Println(a)\n  fmt.Println(b)\n  fmt.Println(c)\n}\n```\n```bash\n% go run a.go\n1\n1\n1\n```\n\n`iota` を使うと連番を作れるらしい。次の `const` で連番はリセット。\n```go\npackage main\n\nimport \"fmt\"\n\ntype Status int32\n\nconst (\n  StatusUndefined Status = iota\n  StatusActive\n  StatusInActive\n)\n\nfunc main() {\n  fmt.Println(StatusUndefined)\n  fmt.Println(StatusActive)\n  fmt.Println(StatusInActive)\n}\n```\n\n```bash\n% go run a.go\n0\n1\n2\n```\n","body":"<p>Go の定数定義は値を指定しないと前の値が使われるらしい。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n  a <span class=\"token builtin\">int32</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  b\n  c\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">% go run a.go\n<span class=\"token number\">1</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">1</span>\n</code></pre></div><p><code>iota</code> を使うと連番を作れるらしい。次の <code>const</code> で連番はリセット。</p>\n<div class=\"code-block-container\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">type</span> Status <span class=\"token builtin\">int32</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n  StatusUndefined Status <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n  StatusActive\n  StatusInActive\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>StatusUndefined<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>StatusActive<span class=\"token punctuation\">)</span>\n  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>StatusInActive<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-bash\"><code class=\"language-bash\">% go run a.go\n<span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n</code></pre></div>"}},"__N_SSG":true}